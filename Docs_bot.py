from PIL import Image
import pytesseract
from telegram import Update, Document, PhotoSize, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.constants import ChatType
import logging
import os
import re
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# –ö–ª—é—á–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_state = {}
user_files = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç", "–ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ"]], one_time_keyboard=True, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_input = update.message.text.lower()

    if user_input in ["–ø—Ä–∏–≤–µ—Ç", "—Ç—ã –∫—Ç–æ"]:
        intro = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏–∑ –Ω–∏—Ö –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∫–∞–Ω–∞—Ö –∏ —Ñ–æ—Ç–æ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª üìÑ"
        )
        await update.message.reply_text(intro)
        return

    if user_id in user_state:
        if user_state[user_id] == "awaiting_action":
            if user_input == "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç":
                file_path = user_files[user_id]
                with open(file_path, "r", encoding="utf-8") as f:
                    text = f.read()
                await update.message.reply_text(text[:4000])
                user_state.pop(user_id)
                user_files.pop(user_id)
            elif user_input == "–Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ":
                user_state[user_id] = "awaiting_fields"
                await update.message.reply_text("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏? –ù–∞–ø—Ä–∏–º–µ—Ä: email, —Ç–µ–ª–µ—Ñ–æ–Ω, —Å—Å—ã–ª–∫–∏")
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        elif user_state[user_id] == "awaiting_fields":
            file_path = user_files[user_id]
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read()
            response = extract_data(text, user_input)
            await update.message.reply_text(response[:4000])
            user_state.pop(user_id)
            user_files.pop(user_id)
        return

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": user_input}]
        )
        answer = response.choices[0].message.content
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞ OpenAI: {e}"
    await update.message.reply_text(answer)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    document: Document = update.message.document
    file = await document.get_file()
    file_path = f"{document.file_unique_id}_{document.file_name}"
    await file.download_to_drive(file_path)

    extracted_text = ""

    try:
        if file_path.endswith(".txt"):
            with open(file_path, "r", encoding="utf-8") as f:
                extracted_text = f.read()
        elif file_path.endswith(".docx"):
            from docx import Document as DocxDocument
            doc = DocxDocument(file_path)
            extracted_text = "\n".join([p.text for p in doc.paragraphs])
        elif file_path.endswith(".pdf"):
            import fitz
            doc = fitz.open(file_path)
            for page in doc:
                extracted_text += page.get_text()
            doc.close()
        elif file_path.lower().endswith((".jpg", ".jpeg", ".png")):
            extracted_text = pytesseract.image_to_string(Image.open(file_path), lang="rus+eng")
        else:
            extracted_text = "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
    except Exception as e:
        extracted_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}"

    temp_path = f"extracted_{user_id}.txt"
    with open(temp_path, "w", encoding="utf-8") as f:
        f.write(extracted_text)

    user_state[user_id] = "awaiting_action"
    user_files[user_id] = temp_path

    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º?", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo: PhotoSize = update.message.photo[-1]
    file = await photo.get_file()
    file_path = f"{photo.file_unique_id}.jpg"
    await file.download_to_drive(file_path)

    try:
        text = pytesseract.image_to_string(Image.open(file_path), lang="rus+eng")
        await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text[:4000]}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
    finally:
        try:
            os.remove(file_path)
        except:
            pass

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–±–ª–æ–Ω–∞–º
def extract_data(text, fields):
    result = []
    if "email" in fields:
        emails = re.findall(r"[\w\.-]+@[\w\.-]+", text)
        result.append("Email:\n" + "\n".join(set(emails)))
    if "—Ç–µ–ª–µ—Ñ–æ–Ω" in fields or "phone" in fields:
        phones = re.findall(r"(\+?\d[\d\s\-()]{7,}\d)", text)
        result.append("–¢–µ–ª–µ—Ñ–æ–Ω—ã:\n" + "\n".join(set(phones)))
    if "—Å—Å—ã–ª–∫" in fields or "http" in fields or "url" in fields:
        links = re.findall(r"https?://[\w\.-/]+|www\.[\w\.-]+", text)
        result.append("–°—Å—ã–ª–∫–∏:\n" + "\n".join(set(links)))
    if not result:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
    return "\n\n".join(result)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_message))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
